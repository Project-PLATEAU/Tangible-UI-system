{
  "index.html": {
    "href": "index.html",
    "title": "PLATEAU Tangible Webアプリ",
    "keywords": "PLATEAU Tangible Webアプリ 本リポジトリでは、Project PLATEAUの令和5年度のユースケース開発業務の一部であるuc23-09 「WEBビューワー」について、その成果物である「PLATEAU TANGIBLE WEBアプリ」のソースコードを公開しています。"
  },
  "manual/apiSpec.html": {
    "href": "manual/apiSpec.html",
    "title": "API基本仕様",
    "keywords": "API基本仕様 本書について 本書では、PLATEAU Tangible Webアプリ（以下「本システム」という。）のAPI基本仕様について記載しています。 基本呼び出しURL curl -X GET \\ -H 'Authorization: Bearer *** API KEY ***' 'https://*** defined by project ***/' API List /buildings/(:gmlID) /furnitures/(:frnID) /tangibles/post /tangibles/(:tangibleId)/ /tangibles/(:tangibleId)/activate /tangibles/(:tangibleId)/inactivate /tangibles/(:tangibleId)/map /tangibles/(:tangibleId)/footprints/buildings /workspaces/(:wsID) /workspaces/(:wsID)/snapshots /workspaces/(:wsID)/snapshots/(:snapID) /workspaces/(:wsID)/tangible /workspaces/(:wsID)/areas/(:areaID)/unitymap Building /buildings/(:gmlID) メソッド 認証 GET 必要 単一(gmlID)建物情報を取得 { \"gmlID\": \"bldg_******\", \"footprint\": [ { \"altitude\": ***, \"latitude\": ***, \"longitude\": *** }, { \"altitude\": ***, \"latitude\": ***, \"longitude\": *** }, ... ], \"center\": { \"altitude\": ***, \"latitude\": ***, \"longitude\": *** }, \"bldgID\": \"14100-bldg-******\", \"created\": { \"_seconds\": 1684318649, \"_nanoseconds\": 126000000 }, \"modified\": { \"_seconds\": 1684318649, \"_nanoseconds\": 126000000 }, \"height\": ******, \"radius\": ****** } Furniture /furnitures/(:frnID) メソッド 認証 GET 必要 単一(frnID)オブジェクト情報を取得 { \"objName\": \"Fairlady_Z.fbx\", \"name\": \"Fairlady_Z\", \"thumbnail\": \"Nissan_Z_Proto_2020.png\", \"type\": \"car\", \"created\": { \"_seconds\": 1690383600, \"_nanoseconds\": 271000000 }, \"thumbUrl\": \"https://firebasestorage.googleapis.com/v0/b/******.appspot.com/o/frn%2Fcar%2FNissan_Z_Proto_2020.png?alt=media&token=******\", \"objUrl\": \"https://firebasestorage.googleapis.com/v0/b/******.appspot.com/o/frn%2Fcar%2FFairlady_Z.fbx?alt=media&token=******\" } Tangible /tangibles/post メソッド 認証 POST 必要 対象tangibleから最新データを投稿 対象tangibleがactiveでないとエラー。taigibles/(:tangibleId)/activateを先に呼び出す必要がある Body { \"unitID\": \"100000005e387919\", \"timestump\": \"yyyy-mm-ddThh:mm\", \"data\": [ { \"markerID\": 1, \"coordinates\": { \"x1\":1182.0, \"x2\":1381.0, \"x3\":1373.0, \"x4\":1172.0, \"y1\":673.0, \"y2\":684.0, \"y3\":888.0, \"y4\":876.0, \"cx\":1277.0, \"cy\":780.25 } }, { \"markerID\": 2, \"coordinates\": { \"x1\":1182.0, \"x2\":1381.0, \"x3\":1373.0, \"x4\":1172.0, \"y1\":673.0, \"y2\":684.0, \"y3\":888.0, \"y4\":876.0, \"cx\":1277.0, \"cy\":780.25 }, }, ... ] } /tangibles/(:tangibleId)/ メソッド 認証 GET 必要 対象tangibleの最新データを取得 /tangibles/(:tangibleId)/activate メソッド 認証 GET 必要 対象tangibleを稼働状態にするtangibles/postで、データをPOSTできるようになる /tangibles/(:tangibleId)/inactivate メソッド 認証 GET 必要 対象tangibleを停止状態にする /tangibles/(:tangibleId)/map メソッド 認証 GET 必要 国土地理院の画像データURLを取得(storageに保存している) URLはパブリックなものなのでそこから画像をダウンロードする unity画像がある場合はunity画像のurlを返却 { \"message\": \"OK\", \"url\": \"https://firebasestorage.googleapis.com/v0/b/******.appspot.com/o/******.png?alt=media&token=******\" } /tangibles/(:tangibleId)/footprints/buildings メソッド 認証 GET 必要 tangibleユニットの表示範囲にいるplateau建物を取得する マーカーではない。マーカーとして選択されているものも含まれている。 [ { \"gmlID\": \"bldg_******\", \"footprint\": [ { \"latitude\": 35.-----, \"longitude\": 139.-----, \"altitude\": 3.----- }, { \"latitude\": 35.-----, \"longitude\": 139.-----, \"altitude\": 3.----- }, ... ], \"center\": { \"latitude\": 35.-----, \"longitude\": 139.-----, \"altitude\": 3.----- }, \"bldgID\": \"14100-bldg-*******\", \"created\": { \"_seconds\": 1686895725, \"_nanoseconds\": 740000000 }, \"modified\": { \"_seconds\": 1686895725, \"_nanoseconds\": 740000000 }, \"height\": *** }, ... ] Workspace /workspaces/(:wsID) メソッド 認証 GET 必要 ワークスペースの基本情報を取得（エリア、マーカー） マーカーの本体情報や座標情報は含まない （座標は最新のスナップショットであり、それは別のAPI） { \"created\": { \"_seconds\": 1689658954, \"_nanoseconds\": 386000000 }, \"description\": \"ワークスペース詳細\", \"title\": \"新規ワークスペース\", \"organizer\": \"******\", \"modified\": { \"_seconds\": 1693790275, \"_nanoseconds\": 819000000 }, \"areas\": [ { \"area\": { \"SW\": { \"lng\": 139.---, \"lat\": 35.--- }, \"NE\": { \"lng\": 139.---, \"lat\": 35.--- }, \"center\": { \"lng\": 139.---, \"lat\": 35.--- }, \"rotation\": 0, \"zoom\": 20.14, \"map\": \"map_******.png\" }, \"created\": { \"_seconds\": 1693183069, \"_nanoseconds\": 659000000 }, \"title\": \"area04\", \"tangibleID\": \"************\", \"modified\": { \"_seconds\": 1693790275, \"_nanoseconds\": 500000000 }, \"docId\": \"1CzDqsPrBpHHs7K70Kqc\", \"markers\": [ { \"objID\": \"******\", \"comment\": \"\", \"type\": \"furniture\", \"markerID\": \"02\", \"created\": { \"_seconds\": 1693790275, \"_nanoseconds\": 719000000 }, \"modified\": { \"_seconds\": 1693790275, \"_nanoseconds\": 719000000 }, \"docId\": \"02\" }, { \"created\": { \"_seconds\": 1693183120, \"_nanoseconds\": 989000000 }, \"objID\": \"bldg_******\", \"comment\": \"\", \"type\": \"building\", \"markerID\": \"00\", \"modified\": { \"_seconds\": 1693790275, \"_nanoseconds\": 719000000 }, \"docId\": \"00\" } ] }, ... ] } /workspaces/(:wsID)/snapshots メソッド 認証 GET/POST 必要 GET ワークスペース(wsID)のスナップショットのリストを取得 マーカー情報は含まれない [ { \"comment\": \"つくれているかな？\", \"screenshot\": \"snapshot_2023-08-03-17-36-52.png\", \"camera\": { \"position\": { \"lng\": 139.***, \"alt\": 255.***, \"lat\": 35.*** }, \"target\": { \"lng\": 139.***, \"alt\": 96.***, \"lat\": 35.*** } }, \"title\": \"スナップショットつくってみた\", \"unityimage\": \"\", \"created\": { \"_seconds\": 1691051813, \"_nanoseconds\": 570000000 }, \"docId\": \"2023-08-03-17-36-52\", \"screenUrl\": \"https://firebasestorage.googleapis.com/v0/b/********.appspot.com/o/workspaces%2F******%2Fsnapshot_2023-08-03-17-36-52.png?alt=media&token=******\" }, ... ] POST スナップショットを作成する タンジブルユニットが最低１つ起動中であることが条件 パラメータ 内容 必須 file 画像ファイル ✓ title スナップショットタイトル ✓ comment スナップショットコメント - camera ディスプレイカメラの情報※1 ✓ ※1: positionはカメラ座標（緯度経度高度）、targetはカメラ視点座標（緯度経度高度） { position: { lat: number, lng: number: alt: number }, target: { lat: number, lng: number: alt: number } } curl -X POST \\ http://***apibase***/workspaces/(:wsId)/snapshots/ \\ -H \"Authorization: Bearer ***apikey***\" \\ -F \"file=@sample.png\" -F 'title=API Snapshot' \\ -F 'comment=comment sample' \\ -F 'camera={\"position\":{\"alt\":16,\"lat\":35.***,\"lng\":139.***},\"target\":{\"alt\":3,\"lat\":35.***,\"lng\":139.***}}' /workspaces/(:wsID)/snapshots/(:snapID) メソッド 認証 GET 必要 ワークスペース(wsID)の単一スナップショット(snapID)の詳細情報を取得 snapIDを\"latest\"にすると最新のスナップショット情報を返却 { \"comment\": \"つくれているかな？\", \"screenshot\": \"snapshot_2023-08-03-17-36-52.png\", \"camera\": { \"position\": { \"lng\": 139.***, \"alt\": 255.***, \"lat\": 35.*** }, \"target\": { \"lng\": 139.***, \"alt\": 96.***, \"lat\": 35.*** } }, \"title\": \"スナップショットつくってみた\", \"unityimage\": \"\", \"created\": { \"_seconds\": 1691051813, \"_nanoseconds\": 570000000 }, \"docId\": \"2023-08-03-17-36-52\", \"screenUrl\": \"******\", \"areas\": [ { \"area\": { \"SW\": { \"lng\": ***, \"lat\": *** }, \"NE\": { \"lng\": ***, \"lat\": *** }, \"center\": { \"lng\": ***, \"lat\": *** }, \"rotation\": 0, \"zoom\": 18 }, \"created\": { \"_seconds\": 1689658954, \"_nanoseconds\": 471000000 }, \"title\": \"area1\", \"tangibleID\": \"******\", \"modified\": { \"_seconds\": 1691051813, \"_nanoseconds\": 625000000 }, \"docId\": \"******\", \"markers\": [ { \"created\": { \"_seconds\": 1689658954, \"_nanoseconds\": 556000000 }, \"rotation\": 4.6718208444643565, \"objID\": \"bldg_******\", \"comment\": \"\", \"position\": { \"lng\": ***, \"lat\": *** }, \"type\": \"building\", \"bldg\": { \"gmlID\": \"bldg_******\", \"footprint\": [ { \"altitude\": ***, \"latitude\": ***, \"longitude\": *** }, ... ], \"center\": { \"altitude\": ***, \"latitude\": ***, \"longitude\": *** }, \"bldgID\": \"14100-bldg-******\", \"created\": { \"_seconds\": 1684318649, \"_nanoseconds\": 126000000 }, \"modified\": { \"_seconds\": 1684318649, \"_nanoseconds\": 126000000 }, \"height\": ******, \"radius\": ****** } \"markerID\": \"02\", \"modified\": { \"_seconds\": 1691051813, \"_nanoseconds\": 677000000 }, \"docId\": \"02\" }, { \"created\": { \"_seconds\": 1689658954, \"_nanoseconds\": 556000000 }, \"rotation\": 4.750831570405878, \"objID\": \"******\", \"comment\": \"\", \"position\": { \"lng\": ***, \"lat\": *** }, \"type\": \"furniture\", \"frn\": { \"objName\": \"Fairlady_Z.fbx\", \"name\": \"Fairlady_Z\", \"thumbnail\": \"Nissan_Z_Proto_2020.png\", \"type\": \"car\", \"created\": { \"_seconds\": 1690383600, \"_nanoseconds\": 271000000 }, \"thumbUrl\": \"https://*****\", \"objUrl\": \"https://*****\" } \"markerID\": \"00\", \"modified\": { \"_seconds\": 1691051813, \"_nanoseconds\": 677000000 }, \"docId\": \"00\" }, ... ] }, ... ] } /workspaces/(:wsID)/tangible メソッド 認証 GET 必要 タンジブルが稼働状態のとき、最新マーカー情報を緯度経度、回転情報付きで返す tangible.markersのマーカーにはマーカー本体情報を付与 [ { \"area\": { \"SW\": { \"lng\": 139.***, \"lat\": 35.*** }, \"NE\": { \"lng\": 139.***, \"lat\": 35.*** }, \"center\": { \"lng\": 139.***, \"lat\": 35.*** }, \"rotation\": 0, \"zoom\": 18 }, \"title\": \"area2\", \"tangibleID\": \"******\", \"created\": { \"_seconds\": 1690184599, \"_nanoseconds\": 428000000 }, \"modified\": { \"_seconds\": 1690184599, \"_nanoseconds\": 428000000 }, \"docId\": \"******\", \"markers\": [ { \"objID\": \"bldg_******\", \"comment\": \"\", \"type\": \"building\", \"markerID\": \"04\", \"created\": { \"_seconds\": 1690184599, \"_nanoseconds\": 660000000 }, \"modified\": { \"_seconds\": 1690184599, \"_nanoseconds\": 660000000 }, \"docId\": \"04\" }, { \"objID\": \"******\", \"comment\": \"\", \"type\": \"furniture\", \"markerID\": \"00\", \"created\": { \"_seconds\": 1690184599, \"_nanoseconds\": 660000000 }, \"modified\": { \"_seconds\": 1690184599, \"_nanoseconds\": 660000000 }, \"docId\": \"00\" }, ... ], \"tangible\": { \"active\": true, \"timestamp\": \"2023-07-26T16:12\", \"markers\": [ { \"objID\": \"bldg_******\", \"comment\": \"\", \"type\": \"building\", \"markerID\": \"02\", \"created\": { \"_seconds\": 1690184599, \"_nanoseconds\": 660000000 }, \"modified\": { \"_seconds\": 1690184599, \"_nanoseconds\": 660000000 }, \"docId\": \"02\", \"center\": { \"lat\": 35.***, \"lng\": 139.*** }, \"rotation\": ***, \"bldg\": { \"gmlID\": \"bldg_***\", \"footprint\": [ { \"altitude\": 3.-, \"latitude\": 35.-, \"longitude\": 139.- }, { \"altitude\": 3.-, \"latitude\": 35.-, \"longitude\": 139.- }, ... ], \"center\": { \"altitude\": 3.-, \"latitude\": 35.-, \"longitude\": 139.- }, \"bldgID\": \"14100-bldg-******\", \"created\": { \"_seconds\": 1686895725, \"_nanoseconds\": 740000000 }, \"modified\": { \"_seconds\": 1686895725, \"_nanoseconds\": 740000000 }, \"height\": ******, \"radius\": ****** } }, { \"objID\": \"******\", \"comment\": \"\", \"type\": \"furniture\", \"markerID\": \"00\", \"created\": { \"_seconds\": 1690184599, \"_nanoseconds\": 660000000 }, \"modified\": { \"_seconds\": 1690184599, \"_nanoseconds\": 660000000 }, \"docId\": \"00\", \"center\": { \"lat\": 35.-, \"lng\": 139.- }, \"rotation\": ***, \"frn\": { \"created\": { \"_seconds\": 1686236400, \"_nanoseconds\": 197000000 }, \"name\": \"Note\", \"type\": \"car\", \"objName\": \"Note.fbx\", \"thumbnail\": \"Note.jpg\", \"thumbUrl\": \"https://******\", \"objUrl\": \"https://******\" } }, ... ] } }, ... ] /workspaces/(:wsID)/areas/(:areaID)/unitymap メソッド 認証 GET/POST 必要 Unityにおけるエリアの地表画像？保存、URL取得 マーカーの本体情報や座標情報は含まない area情報に含まれるNE(North East)からSW(South West)の範囲の1920*1080の画像としてPOSTすること レスポンスはGET/POST同様 {\"url\":\"https://firebasestorage.googleapis.com/v0/b/******\"} POST 画像ファイルをmultipart/formdataとしてPOST。キーは\"file\" curl -X POST \\ http://***apibase***/workspaces/(:wsId)/areas/(:areaId)/unitymap \\ -H \"Authorization: Bearer ***apikey***\" \\ -F \"file=@sample.png\""
  },
  "manual/dataSpec.html": {
    "href": "manual/dataSpec.html",
    "title": "アプリのデータモデル",
    "keywords": "アプリのデータモデル Firestore Database のコレクション定義 buildings 建物。一般建築物。アプリ上不変データ 項目 field type 必須 id id ハッシュ値（gmlID） ✓ 建物 ID bldgID string ✓ 緯度経度 geopoint geopoint ✓ 高度 altitude number ✓ geohash※1 geohash geohash ✓ lod0footprint※2 footprint array ✓ 建物高さ height number ✓ 登録日 created timestamp ✓ 更新日 modified timestamp ✓ ※1: firebase のジオクエリ用の拡張機能で使用。 ※2: {latitude: number, longitude: number, altitude: number}の array として定義。 furnitures アプリ上不変データ 項目 field type 必須 id id ハッシュ値※1 ✓ 名称 name string ✓ ユニットタイプ type string※2 ✓ オブジェクト URL objName string※3 ✓ サムネイル URL thumbName string※4 ✓ 登録日 created timestamp ✓ ※1: frnID データベースの自動発番 ※2: facility とか、car とか（任意に設定してよい） ※3: .fbx ファイルのパス（Firebase Storage にアップロードしておく） ※4: サムネイル画像のパス（Firebase Storage にアップロードしておくと良い） specials アプリ上不変データ。特殊駒枠。 項目 field type 必須 id id ユニーク ✓ 名称 name string ✓ 駒タイプ type camera or special※1 ✓ 内容 body object※2 ✓ ※1: 現状カメラと特殊駒のみ ※2: カメラの場合は以下 { mode : \"human\" | \"drone\" | \"heli\", angle: number, // 上下角度 view: number, // カメラ視野角 height: number, // 高度 } tangibles タンジブルの箱。ラズパイのキーとメタデータは不変 生データがラズパイ側から送られる。 areaの tangibleID から生データを呼び出す予定。 項目 field type 必須 id id ハッシュ値 ✓ 登録日 created timestamp ✓ 更新日 modified timestamp ✓ 生データ rawData object※1 - エリアデータ※2 area object※3 ✓ 稼働状態※4 active boolean ✓ カメラ画像の横幅 width number ✓ カメラ画像の縦幅 height number ✓ ディスプレイの実測値※5 meterPerPixel number ✓ ※1: ラズパイから送られてきた生データ。現在地に当たる。数秒間隔なので履歴としてすべてのデータを残すことはしない?生データではなく、座標変換（緯度経度）までしてしまうか？ ※2: このタンジブルが現在どのエリアを繁栄しているか。アプリ側で area と紐づけるときに更新される ※3:紐づけ情報。rotation は実装未定。map は中心座標と zoom レベルで表示が決定されるため。 { workspaceID: number, areaID: number center: { /* center? */ lat: number, lng: number }, zoom: number, rotation?: number } ※4:稼働状態。ラズパイ側から API で activate してからデータを送信する。アプリ側ではactive=trueであれば稼働中と判断する ※5:ディスプレイの実測値。１ピクセルあたりのメートル数 users 項目 field type 必須 id id ハッシュ値※1 ✓ 表示名 displayName string ✓ プロフィール写真 profile string※2 - 登録日 created timestamp ✓ 変更日 modified timestamp ✓ ※1: firebase auth で登録されたハッシュ値。 ※2: 画像ファイル名 workspaces 項目 field type 必須 id id ハッシュ値 ✓ 表示名 title string ✓ 説明 description string ✓ オーガナイザ organizer string ✓ 登録日 created timestamp ✓ 変更日 modified timestamp ✓ 検討範囲 areas collection ✓ スナップショット snapshots collection - workspaces.areas 検討範囲オブジェクト 項目 field type 必須 id id ハッシュ値 ✓ タンジブル ID tangibleID string ✓ タイトル title string ✓ 範囲 area object※1 ✓ 登録日 created timestamp ✓ 変更日 modified timestamp ✓ 配置駒 markers collection - ※1: geohash を入れる？zoom と center が決まるとタンジブル側のサイズと解像度の制限で範囲は決定されるため、NE, SW は計算可能 { NE: { /* North East */ lat: number, lon: number }, SW: { /* South West */ lat: number, lon: number }, center: { lat: number, lng: number }, zoom: number, rotation?: number, map?: string // 国土地理院のデータより作成したエリア範囲画像ファイル名 unity?: string // Unityで作成したエリア範囲画像ファイル名 } workspaces.areas.markers workspaces.snapshots.areas.markersと同じではない（あくまで選択しただけで配置してるかは未定だから）。 項目 field type 必須 id id ハッシュ値 ✓ マーカー ID markerID string※1 ✓ マーカータイプ type string※2 ✓ オブジェクト ID objID string※3 ✓ コメント comment string ✓ 登録日 created timestamp ✓ 更新日 modified timestamp ✓ ※1: ユニット番号。\"01\"-\"99\"(ユニットである必要はないかも) ※2: \"furniture\" | \"building\" | \"special\" ※3: type 次第。ビルであればbuildingsコレクションの gmlID。ファニチャーであればfurnituresコレクションの frnID。スペシャルは camera_01 など ID で何かを判別できるもの workspaces.snapshots セーブデータ 項目 field type 必須 id id ハッシュ値 ✓ 保存日 created timestamp ✓ スクリーンショット screenshot string※1 ✓ タイトル title string - コメント comment string - カメラ位置 camera object※2 ✓ 検討範囲 areas※3 collection ✓ ※1: 画像ファイル名。URL は id などから生成。unity など外部からの場合も同様 ※2: VR 用のカメラ座標 { position: { lat: number, lng: number, alt: number }, target: { lat: number, lng: number, alt: number } } ※3: エリア情報。ドキュメント ID ごとコピー workspaces.snapshots.areas 検討範囲オブジェクト 基本データはworkspaces.areaのコピー 項目 field type 必須 id id ハッシュ値 ✓ タンジブル ID tangibleID string ✓ タイトル title string ✓ 範囲 area object ✓ 登録日 created timestamp ✓ 変更日 modified timestamp ✓ 配置駒 markers※1 collection - ※1: 配置されている駒のみ。座標情報を含む workspaces.snapshots.areas.markers workspaces.areas.markersと完全な同一構造ではない。 workspaces.areas.markersで登録だけして配置していない駒は記録されない。 項目 field type 必須 id id ハッシュ値 ✓ マーカー ID markerID string ✓ タイプ type string ✓ オブジェクト ID objID string ✓ 登録日 created timestamp ✓ 更新日 modified timestamp ✓ 座標 position object※1 ✓ 方向 rotation number※2 ✓ ※1: 緯度経度座標情報 { lat: number, lng: number, alt?: number } ※4: 北を 0 ラジアンとしたマーカーの向き情報 注意事項 アプリ上でエリアやスナップショットを削除した場合、ドキュメントは削除されるが配下のサブコレクションは削除されない。アプリを使う上では気にならない。 セキュリティ設定 本プロジェクトでは Firebase のダッシュボード上で設定。 Firestore Database, Storege のページからルール → ルールの編集を選択し、以下のコードを貼り付ける。 Firestore Database のルール rules_version = '2'; service cloud.firestore { match /databases/{database}/documents { match /buildings/{building} { allow read: if request.auth != null; allow write: if request.auth != null; } match /users/{userId}/{user=**} { allow read: if request.auth != null; allow write: if request.auth.uid == userId; } } } Storage のルール rules_version = '2'; service firebase.storage { match /b/{bucket}/o { match /tags/{tag=**} { allow read; allow write: if request.auth != null; } match /users/{userId}/{imgs=**} { allow read; allow write: if request.auth.uid == userId; } } } PLATEAU モデルの組み込み手順 ①gml ファイルより必要なデータを抽出 例:建物の場合 bldg:Building要素内より、次の属性を抽出。 - gml:id ※1 - uro:buildingID ※2 - bldg:lod1Solid※3 ※1: ユニークであるもの。 ※2: bldgID 等。\"bldg:consistsOfBuildingPart\"を含む場合は１つの bldgID に対し、複数の gmlID が生まれるため、この値はユニークではない。また<gen:stringAttribute name=\"建物ID\">の値である可能性もある。 ※3: \"bldg:lod0FootPrint\"、\"bldg:lod0RoofEdge\"ではなく\"bldg:lod1Solid\"より底面、高さを抽出し、それを footprint と高さみなす。 ②JSON 形式に整形 posList は以下のように配列に変換。 { latitude: Number, longitude: Number, altitude: Number} またジオクエリに対応するためオブジェクトの中心座標を計算（平均値）。 # 建物オブジェクト { gmlID: string, bldgID: string, height: number, footprint: [{ latitude: number, longitude: number, altitude: number }..], center: { latitude: number, longitude: number, altitude: number } } ③Firestore に登録 center は GeoPoint に変換。GeoHash ロジックを使用するのでその情報も付与。"
  },
  "manual/devMan.html": {
    "href": "manual/devMan.html",
    "title": "環境構築手順書",
    "keywords": "環境構築手順書 1 本書について 本書では、PLATEAU TANGIBLE WEBアプリ（以下「本システム」という。）の利用環境構築手順について記載しています。本システムの構成や仕様の詳細については以下も参考にしてください。 技術検証レポート 2 動作環境 本システムの動作環境は以下のとおりです。 フロントサイドアプリ Web フレームワーク：React.js (ver18.2.0) 3D 対応ライブラリ：Three.js (ver0.158.0) バックエンドアプリ（SPA） Firebase Project Authentication Firestore Database Cloud Storage Cloud Function 3 設定手順 Firebase の設定 ※Firebase のプロジェクトの設定方法、ローカルでの環境構築方法、仕様方法については Firebase のドキュメントを参照してください。 タンジブル駒の登録 データモデルを参考に、タンジブル駒（buildings、furnitures、specials）を登録しておきます。 Firebase Storage を localhost で使う際の注意点 cors 設定で弾かれるため、cors.json を作成します [ { \"origin\": [\"http://localhost:5173\", \"https://********.firebaseapp.com\", \"https://********.web.app\"], \"method\": [\"GET\"], \"maxAgeSeconds\": 3600 } ] cors.json を作成したフォルダ（基本はプロジェクトのルート）にて、gsutl コマンドを実行してください gsutil cors set cors.json gs://********.appspot.com Firebase Function の注意点 Puppeteer 設定 国土地理院の画像を生成するために Function 側で osm-static-maps というライブラリを利用していますが、このライブラリは puppeteer というライブラリを利用しています この puppeteer は v19 以降でかなり破壊的な変更が加えられており、osm-static-maps の最新版では対応できていません そのため、osm-static-maps のgithub ページからソースファイルを直接ダウンロードし、Function 内に直接追加しています(functions/third_party/osm/) Puppeteer を Cloud function にて使用する方法はここやここが参考になります .puppeteerrc.cjsの追加 const {join} = require('path'); /** * @type {import(\"puppeteer\").Configuration} */ module.exports = { // Changes the cache location for Puppeteer. cacheDirectory: join(__dirname, '.cache', 'puppeteer'), }; puppeteer をすでにインストールしていれば一度アンインストールし、再度インストール firebase.json.に追記 { \"functions\": [ { \"ignore\": [ \".cache\", // これを追記 ... ], ... } ], ... } デプロイ時に Chromium 本体をアプロードしないため。そうしないと「パッケージが大きすぎるためデプロイできません」等のエラーがでます package.json(function 側)に追記 { \"scripts\": { \"postinstall\": \"node node_modules/puppeteer/install.js\", // これを追記 ... }, ... } Cloud Functions ではデプロイ後のnpm install時に Chromium が自動的にインストールされないので、postinstall でインストールスクリプトを実行してください。 Aruco マーカー 予め 0 から 120 番までのマーカー画像を public/aruco に用意しています Aruco マーカーについて、詳しくは、こちらのサイトを参照してください。"
  },
  "manual/userMan.html": {
    "href": "manual/userMan.html",
    "title": "操作マニュアル",
    "keywords": "操作マニュアル 1 本書について 本書では、PLATEAU TANGIBLE WEBアプリ（以下「本システム」という。）の操作手順について記載しています。 2 操作方法 本アプリでは、地図上の範囲、使用するタンジブルユニット、使用するタンジブル駒を関連付けたまとまりを「ワークスペース」と呼んでいます。 ログインユーザーはワークスペースを作成したり、スナップショットを登録したりすることができます。ここでは、本アプリの主な操作であるワークスペースの作成方法とスナップショットの作成方法を解説します。 ワークスペースの作成 ログイン後、「新規ワークスペース作成」ボタンを押して、ワークスペースを作成します。 以降の操作は、検討範囲ごとに繰り返します。 連携させるタンジブルユニットを指定します 地図上を指定して検討範囲を設定します 使用するタンジブル駒を指定します スナップショットの作成 ワークスペースの画面から「VRモード」ボタンを押して、VRモードを起動します 「スナップショット作成」ボタンを押します タイトルとコメントを入力して「保存」して完了です。 API アプリのデプロイに成功すると、APIが使えるようになります。用意されているAPIの種類や仕様についてはAPI ドキュメントを参照してください。"
  }
}